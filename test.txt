public class BankServiceTest {
  
  private BankService bankService;
  private SmsService smsService;

  @BeforeEach
  public void setup() {
    smsService = mock(SmsService.class);
    bankService = new BankService(smsService);
  }

  @Test
  @DisplayName("若刷卡超過1000元，需寄送驗證簡訊")
  void send_sms_if_total_is_more_than_1000()  {
    // arrange
    Order order = new Order().amount(4904);

    // act
    bankService.process(order);

    // assert
    verify(smsService, time(1)).sendOtp();
  }
}

@Test
void status_is_playing() {
    // arrange
    MyPlayer player = new MyPlayer();
    player.setVideo("Titanic");

    // act
    player.play();

    // assert
    Assertions.assertTrue(STATUS_PLAYING, player.getStatus()); 
}

@Test 
public void credit_card_is_charged() {    
    // 過度依賴 mock framework
    paymentProcessor =
        new PaymentProcessor(mockCreditCardServer, mockTransactionProcessor);    
    when(mockCreditCardServer.isServerAvailable()).thenReturn(true);
    when(mockTransactionProcessor.beginTransaction()).thenReturn(transaction);
    when(mockCreditCardServer.initTransaction(transaction)).thenReturn(true);
    when(mockCreditCardServer.pay(transaction, creditCard, 500)).thenReturn(false);
    when(mockTransactionProcessor.endTransaction()).thenReturn(true);

    paymentProcessor.processPayment(creditCard, Money.dollars(500));

    // 太多假的行為，根本不曉得 transaction 有沒有真正成功，即測試結果可能不準確
    verify(mockCreditCardServer, times(1)).pay(transaction, creditCard, 500);
}


@Test 
public void grant_user_permission() {   
    // ... arrange, act ...

    // 合理, 應該只要 verify "會影響外界"的行為
    verify(mockPermissionDatabase, times(1)).addPermission(FAKE_USER, USER_ACCESS);

    // 不應 verify "不會影響外界"的行為
    verify(mockPermissionDatabase, times(1)).getPermission(FAKE_USER);
}

@Test 
public void grant_user_permission() {   
    // ... arrange, act ...

    verify(mockPermissionDatabase, times(1)).addPermission(FAKE_USER, USER_ACCESS);
    verify(mockPermissionDatabase, times(1)).getPermission(FAKE_USER);
}



@Test
public void shouldNavigateToAlbumsPage() {
    String baseUrl = "http://photos.google.com/";
    Navigator nav = new Navigator(baseUrl);
    nav.goToAlbumPage();
    assertThat(nav.getCurrentUrl()).isEqualTo(baseUrl + "/albums");
}


@Test
public void shouldNavigateToPhotosPage() {
    Navigator nav = new Navigator("http://photos.google.com/");
    nav.goToPhotosPage();
    assertThat(nav.getCurrentUrl()))
    .isEqualTo("http://photos.google.com//albums"); // Oops!
}



@Test 
public void display_greeting_render_userName() {
    when(mockUserService.getUserName()).thenReturn("Fake User");

    userGreeter.displayGreeting(); 
        
    verify(userPrompt, times(1)).setText("Fake User", "Good morning!", "Version 2.1");
    verify(userPrompt, times(1)).setIcon(IMAGE_SUNSHINE);
}


@Test 
public void displayGreeting_renderUserName() {    
    when(mockUserService.getUserName()).thenReturn("Fake User");

    userGreeter.displayGreeting(); 

    // 只驗證我們真正在意的 userName
    verify(userPrompter).setText(eq("Fake User"), any(), any());
}

@Test 
public void displayGreeting_timeIsMorning_useMorningSettings() {
    setTimeOfDay(TIME_MORNING);

    userGreeter.displayGreeting(); 
    
    // 只驗證我們真正在意的 "早安、早晨的 icon"
    verify(userPrompt).setText(any(), eq("Good morning!"), any());
    verify(userPrompt).setIcon(IMAGE_SUNSHINE);
}

